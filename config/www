#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server'),
  config = require('../config/main'),
  http = require('http'),
  fs = require('fs'),
  https = require('https');

/**
 * Get port from environment and store in Express.
 */

const port =
  process.env.NODE_ENV === 'development'
    ? normalizePort(config.port)
    : normalizePort(443);

app.set('port', port);

let server = http.createServer(app);

if (process.env.NODE_ENV === 'development') {
  console.log(`Server running under ${process.env.NODE_ENV}`);
} else if (config.protocole === 'https') {
  const options = {
    key: fs.readFileSync(config.keys),
    cert: fs.readFileSync(config.cert)
  };

  //https over http
  server = https.createServer(options, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`EndPoint on http://localhost:${port}`);
});
server.on('error', onError);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
